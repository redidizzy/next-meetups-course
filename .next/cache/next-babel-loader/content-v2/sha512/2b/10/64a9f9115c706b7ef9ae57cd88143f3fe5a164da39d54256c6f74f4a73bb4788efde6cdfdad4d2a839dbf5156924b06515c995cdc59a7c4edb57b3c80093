{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/rediane/learning/react/nextjs/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient } from \"mongodb\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: \"https://hatrabbits.com/wp-content/uploads/2017/01/random.jpg\",\n    title: \"A first meetup\",\n    address: \"Some address 5, some city\",\n    description: \"the meetup description\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = new MongoClient(\"mongodb://admin:admin@cluster0-shard-00-00.wa08y.mongodb.net:27017,cluster0-shard-00-01.wa08y.mongodb.net:27017,cluster0-shard-00-02.wa08y.mongodb.net:27017/meetups?ssl=true&replicaSet=atlas-p31clz-shard-0&authSource=admin&retryWrites=true&w=majority\", {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  });\n  await client.connect();\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  console.log(meetups.map(meetup => ({\n    params: {\n      meetupdId: meetup._id.toString()\n    }\n  })));\n  await client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = new MongoClient(\"mongodb://admin:admin@cluster0-shard-00-00.wa08y.mongodb.net:27017,cluster0-shard-00-01.wa08y.mongodb.net:27017,cluster0-shard-00-02.wa08y.mongodb.net:27017/meetups?ssl=true&replicaSet=atlas-p31clz-shard-0&authSource=admin&retryWrites=true&w=majority\", {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  });\n  await client.connect();\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetup = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  return {\n    props: {\n      meetup\n    },\n    revalidate: 1\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/home/rediane/learning/react/nextjs/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","MeetupDetails","props","getStaticPaths","client","useNewUrlParser","useUnifiedTopology","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","console","log","map","meetup","params","meetupdId","toString","close","fallback","paths","meetupId","getStaticProps","context","findOne","revalidate"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AAEA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAC,8DADR;AAEE,IAAA,KAAK,EAAC,gBAFR;AAGE,IAAA,OAAO,EAAC,2BAHV;AAIE,IAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,IAAIJ,WAAJ,CACb,4PADa,EAEb;AAAEK,IAAAA,eAAe,EAAE,IAAnB;AAAyBC,IAAAA,kBAAkB,EAAE;AAA7C,GAFa,CAAf;AAIA,QAAMF,MAAM,CAACG,OAAP,EAAN;AACA,QAAMC,EAAE,GAAGJ,MAAM,CAACI,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CACEL,OAAO,CAACM,GAAR,CAAaC,MAAD,KAAa;AACvBC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,SAAS,EAAEF,MAAM,CAACL,GAAP,CAAWQ,QAAX;AAAb;AADe,GAAb,CAAZ,CADF;AAMA,QAAMjB,MAAM,CAACkB,KAAP,EAAN;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEb,OAAO,CAACM,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEM,QAAAA,QAAQ,EAAEP,MAAM,CAACL,GAAP,CAAWQ,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeK,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMF,QAAQ,GAAGE,OAAO,CAACR,MAAR,CAAeM,QAAhC;AACA,QAAMrB,MAAM,GAAG,IAAIJ,WAAJ,CACb,4PADa,EAEb;AAAEK,IAAAA,eAAe,EAAE,IAAnB;AAAyBC,IAAAA,kBAAkB,EAAE;AAA7C,GAFa,CAAf;AAIA,QAAMF,MAAM,CAACG,OAAP,EAAN;AACA,QAAMC,EAAE,GAAGJ,MAAM,CAACI,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMQ,MAAM,GAAG,MAAMT,iBAAiB,CAACmB,OAAlB,CAA0B;AAAEf,IAAAA,GAAG,EAAEY;AAAP,GAA1B,CAArB;AAEA,SAAO;AACLvB,IAAAA,KAAK,EAAE;AACLgB,MAAAA;AADK,KADF;AAILW,IAAAA,UAAU,EAAE;AAJP,GAAP;AAMD;AAED,eAAe5B,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\"\n\nimport { MongoClient } from \"mongodb\"\n\nfunction MeetupDetails(props) {\n  return (\n    <MeetupDetail\n      image=\"https://hatrabbits.com/wp-content/uploads/2017/01/random.jpg\"\n      title=\"A first meetup\"\n      address=\"Some address 5, some city\"\n      description=\"the meetup description\"\n    />\n  )\n}\n\nexport async function getStaticPaths() {\n  const client = new MongoClient(\n    \"mongodb://admin:admin@cluster0-shard-00-00.wa08y.mongodb.net:27017,cluster0-shard-00-01.wa08y.mongodb.net:27017,cluster0-shard-00-02.wa08y.mongodb.net:27017/meetups?ssl=true&replicaSet=atlas-p31clz-shard-0&authSource=admin&retryWrites=true&w=majority\",\n    { useNewUrlParser: true, useUnifiedTopology: true }\n  )\n  await client.connect()\n  const db = client.db()\n  const meetupsCollection = db.collection(\"meetups\")\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray()\n  console.log(\n    meetups.map((meetup) => ({\n      params: { meetupdId: meetup._id.toString() },\n    }))\n  )\n\n  await client.close()\n\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  }\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId\n  const client = new MongoClient(\n    \"mongodb://admin:admin@cluster0-shard-00-00.wa08y.mongodb.net:27017,cluster0-shard-00-01.wa08y.mongodb.net:27017,cluster0-shard-00-02.wa08y.mongodb.net:27017/meetups?ssl=true&replicaSet=atlas-p31clz-shard-0&authSource=admin&retryWrites=true&w=majority\",\n    { useNewUrlParser: true, useUnifiedTopology: true }\n  )\n  await client.connect()\n  const db = client.db()\n  const meetupsCollection = db.collection(\"meetups\")\n  const meetup = await meetupsCollection.findOne({ _id: meetupId })\n\n  return {\n    props: {\n      meetup,\n    },\n    revalidate: 1,\n  }\n}\n\nexport default MeetupDetails\n"]},"metadata":{},"sourceType":"module"}